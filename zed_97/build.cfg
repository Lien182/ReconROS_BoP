#
# General settings
#
#   TargetBoard - board to run you application on
#   TargetOS    - operating system to use
#   SystemClock - clock of the ReconOS system
#   CFlags      - additional flags for compilation
#   LdFlags     - additional flags for linking
#
[General]
Name = RecoBop
TargetBoard = zedboard,d
TargetPart = xc7z020clg484-1
#ReferenceDesign = timer
ReferenceDesign = timer_bop_hdmi
TargetOS = linux
TargetXil = vivado,2016.2
TargetHls = vivado,2016.2
SystemClock = System
CFlags = -g -I $(RECONOS)/linux/tools/timer -I application -O3 -funroll-all-loops
LdFlags = -L $(RECONOS)/linux/tools/timer -ltimer -lm

#
# Clock definition
#
#   ClockSource - static or reconfigurable clock
#   ClockFreq   - initial clock frequency
#
[Clock@System]
ClockSource = static
ClockFreq = 100000000

#
# Specification of hardware thread slots
#
#   Id               - id of the slot
#   IsReconfigurable - reconfigurable slot or not
#   Clock            - clock connected to the slot
#
#[HwSlot@Servo(0:0)]
#Id = 0
#Clock = System

#[HwSlot@Touch(0:0)]
#Id = 1
#Clock = System

[HwSlot@Control(0:0)]
Id = 0
Clock = System

[HwSlot@Inverse(0:0)]
Id = 1
Clock = System

#[HwSlot@Monitor(0:0)]
#Id = 0
#Clock = System

#[HwSlot@Sobel(0:0)]
#Id = 13
#Clock = System



#
# Resource definition
#
#   <Name> - type,<optional arguments>
#
[ResourceGroup@Cycle_Timer]
cmd_cond = cond
cmd_mutex = mutex

[ResourceGroup@Servo(0:2)]
legangle_msg = rosmsg, bop_msg ,msg ,Legangle 
servo_node = rosnode, "servo_node_%"
SubData = rossub, servo_node,legangle_msg, "legangle_%", 1000

[ResourceGroup@Touch(0:2)]
position_msg = rosmsg, bop_msg ,msg, Position 
touch_node = rosnode, "touch_node_%"
PubData = rospub, touch_node, position_msg, "position_%"

[ResourceGroup@Inverse(0:2)]
legangle_msg = rosmsg, bop_msg ,msg ,Legangle 
rotation_msg = rosmsg, bop_msg ,msg ,Rotation 
inverse_node = rosnode, "inverse_node_%"
PubData = rospub, inverse_node, legangle_msg, "legangle_%"
SubData = rossub, inverse_node, rotation_msg, "rotation_%", 1000

[ResourceGroup@Control(0:2)]
position_msg = rosmsg, bop_msg ,msg, Position 
rotation_msg = rosmsg, bop_msg ,msg ,Rotation 
control_node = rosnode, "control_node_%"
SubData = rossub, control_node, position_msg, "position_%", 1000
PubData = rospub, control_node, rotation_msg, "rotation_%"

[ResourceGroup@Legacy_0]
inverse_0_cmd = mbox,256

[ResourceGroup@Video]
image_msg_in = rosmsg, sensor_msgs ,msg ,Image 
node_1 = rosnode, "BoP_ImgSubscriber"
SubData = rossub, node_1, image_msg_in, "/image_raw",10000


#
# Specification of thread types
#
#   Slot          - slot to implement the hardware thread in
#   Source        - source if the hardware thread
#   ResourceGroup - resources of the hardware thread
#



#Demonstrator 0
#[ReconosThread@Servo]
#Slot = Servo(*)
#HwSource = vhdl
#SwSource = c
#ResourceGroup = Servo_0
#UseMem = true

#[ReconosThread@Touch]
#Slot = Touch(*)
#HwSource = vhdl
#SwSource = c
#ResourceGroup = Touch_0, Cycle_Timer
#UseMem = true

[ReconosThread@Control]
Slot = Control(*)
HwSource = hls
SwSource = c
ResourceGroup = Control_2, Cycle_Timer
UseMem = true

[ReconosThread@Inverse]
Slot = Inverse(*)
HwSource = hls
SwSource = c
ResourceGroup = Inverse_2, Cycle_Timer
UseMem = true

#[ReconosThread@Sobel]
#Slot = Sobel(*)
#HwSource = hls
#SwSource = c
#ResourceGroup = Video, Reconfiguration_V
#UseMem = true

#[ReconosThread@Color2bw]
#Slot = RGB2GR(*)
#HwSource = hls
#SwSource = c
#ResourceGroup = Video, Reconfiguration_V
#UseMem = true

#[ReconosThread@Framegrabber]
#Slot = Framegrabber(*)
#HwSource = vhdl
#SwSource = c
#ResourceGroup = Video
#UseMem = true


#[ReconosThread@Monitor]
#Slot = Monitor(*)
#HwSource = hls
#SwSource = c
#ResourceGroup = Video
#UseMem = true
#VideoOut = true
